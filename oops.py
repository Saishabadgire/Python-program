# -*- coding: utf-8 -*-
"""OOPs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V_uVRYAnmNDXR86VW8Q6v9AOfof0zuzX
"""

class xyz:
  p=20
  q=30

  def fun1(self):
    print("value of p:",self.p)

  def fun2(self,b):
    m= b*self.p
    return m


object=xyz()

object.fun1()

from os import name
class Dog:
  def __init__(self,nme):
    self.name=name

  def talk(self):
    print("woof !")

  def printname(self):
    print("my name is:{}".format (self.name))

dog=Dog("Charli")
dog.talk()

dog.printname()

class faculty:
  def data(self):
    self.id=int(input("enter faculty id \n"))
    self.name=int(input("enter faculty name \n"))
    self.salary=int(input("enter faculty salary \n"))

  def show(self):
    print("faculty id:",self.id)
    print("faculty name:",self.name)
    print("faculty salary:",self.salary)

f_data=faculty

f_data.data

class faculty:
  def __init__(self,id,name,salary):
    self.id=id
    self.name=name
    self.salary=salary

  def show(self):
    print("faculty id:",self.id)
    print("faculty name:",self.name)
    print("faculty salary:",self.salary)

info=faculty(1,"saisha",50000)

info.show()

class Animal:
  def __init__(self,name):
    self.name=name

  def speak(self):
    return f"{self.name} make sound"

class Dog(Animal):
  def speak(self):
      return f"{self.name} barks"

class Cat(Animal):
  def speak(self):
      return f"{self.name} meow"

animal=Animal("Generic Animals")
print(animal.speak())

dog=Dog("Max")
print(dog.speak())

cat=Cat("Mini")
print(cat.speak())

# polymorphism

def add(a,b,c=0,d=0):
  print(a+b+c)

add=(10,20,40)

class Animal:
  def sound(saisha):
    return "some generic animal"

class Dog:
  def sound(saisha):
    return "barks"

class Cat:
  def sound(saisha):
    return " meow"

 # crteate objects

animal=Animal()
dog=Dog()
cat=Cat ()

 # call methods

print(animal.sound())
print(cat.sound())
print(dog.sound())

class car:
  def __init__(self,name,wheels):
    self.name = name
    self.wheels = wheels

  def start(self):
      return f"{self.name} is starting."

  def description(self):
    return f"{self.name} has {self.wheels} wheels."

#Truck
class Truck:
  def __init__(self, name, wheels):
      self.name = name
      self.wheels = wheels

  def start(self):
    return f"{self.name} is starting."

  def description(self):
    return f"{self.name} has {self.wheels} wheels."

Car =car("Sedan", 4)

print(Car.start())   #
print(Car.description())

truck =Truck("International",10)
truck.start()
truck.description()

# method overloading

class mathoperations:
  def add(a=0,b=0,c=0,d=0):
    return a+b+c+d
math_op=mathoperations
print(math_op.add(5,34,23,2))

# method overrriding

class Worker:
    def work(self):
       print("Working")
    def perform_task(self):
       print("Performing Task: ", end='')
       self.work()

class DeliveryMan(Worker):
    def work(self):
       print("Delivering Goods")

class LumberJack(Worker):
     def work(self):
        print("Cutting Woods")

deliveryMan = DeliveryMan()
lumberJack = LumberJack()

deliveryMan.perform_task()
lumberJack.perform_task()

# encapsulation

class A:
  a=10    #public access
  __b=20  #private
  def Fun1(self):
      print(self.a)
  def Fun2(self):
      print(self.__b)

obj=A()
obj.a
obj.b

class car:
    def Price(self):
        self.__updatesoftware()  # Corrected method name

    def drive(self):
        print('driving')

    def __updatesoftware(self):  # Method name matches the one in __init__
        print('updating Software')

redcar = car()
redcar.drive()
redcar.Price()

redcar._car__updatesoftware()  # Accessing the private method directly

class SomeClass:
  def public(self):
    print("Public function")

  def __private(self):   #private method
    print("Private Function")

obj = SomeClass()
obj.public()
obj._SomeClass__private()    #Name Mangling

class Encapsulation:
  def __init__(self):
    print(self.__b)

  a=100
  __b=200

ob = Encapsulation()
print(ob.a)

class Describe:
  def __init__(self):
    self.__fun2()

  def fun1(self):
    print("I am a public method")
    #a

  def __fun2(self):
    print("I am the private number")

D= Describe()
D.fun1()

# exception handling

#.dividion error

a=int(input("enter A value for a"))
b=int(input("enter A value for b"))

c=a/b
print(c)

# editing values of private variables

class Example:
    def __init__(self, value):
        self.__private_value = value  # Private variable

    def get_value(self):
        return self.__private_value

    def set_value(self, new_value):
        self.__private_value = new_value  # Method to modify the private variable


# Create an instance of the class
obj = Example(20)

# Accessing and modifying the private variable using a public method
print("Before:", obj.get_value())
obj.set_value(30)
print("After:", obj.get_value())

# directly modify private variable

class Example:
    def __init__(self, value):
        self.__private_value = value  # Private variable

# Create an instance of the class
obj = Example(10)

# Accessing the private variable using name mangling
print("Before:", obj._Example__private_value)

# Modifying the private variable using name mangling
obj._Example__private_value = 30
print("After:", obj._Example__private_value)

# advanced data structure

# 1.Deque

from collections import deque
# create deque
d=deque()
d.append(1)
d.appendleft(2)
print(d)

d.pop
d.popleft()
print(d)

d.extend([1,2,3])
print(d)
d.extendleft([4,5,6])
print(d)

from collections import deque

# Create a deque with an initial list of elements
my_deque = deque([1, 2, 3, 4, 5])

print("Initial deque:", my_deque)

# Append an element to the right (end) of the deque
my_deque.append(6)
print("After appending 6 to the right:", my_deque)

# Append an element to the left (start) of the deque
my_deque.appendleft(0)
print("After appending 0 to the left:", my_deque)

# Pop an element from the right (end) of the deque
popped_right = my_deque.pop()
print(f"After popping from the right ({popped_right} removed):", my_deque)

# Pop an element from the left (start) of the deque
popped_left = my_deque.popleft()
print(f"After popping from the left ({popped_left} removed):", my_deque)

# Extend the deque by adding multiple elements to the right
my_deque.extend([7, 8])
print("After extending deque on the right with [7, 8]:", my_deque)

# Extend the deque by adding multiple elements to the left
my_deque.extendleft([-2, -1])
print("After extending deque on the left with [-2, -1]:", my_deque)

# Rotate the deque by n steps (positive to the right, negative to the left)
my_deque.rotate(3)
print("After rotating right by 2:", my_deque)

my_deque.rotate(-2)
print("After rotating left by 2:", my_deque)

# Clear all elements from the deque
my_deque.clear()
print("After clearing the deque:", my_deque)

# 2. Namedtuple

from collections import namedtuple
person=namedtuple('person',['name','age','city'])

person1=person(name='saisha',age=20,city='latur')

print(person1.name)
print(person1.age)
print(person1.city)

#WITH MULTIPLE VALUES:

from collections import namedtuple

Person = namedtuple('person', ['name', 'age', 'city'])

# Define multiple person data entries
person_data_list = [
    ['saisha', 28, 'latur'],
    ['dnyana', 34, 'beed'],
    ['vaishu', 22, 'pune'],
    ['rutu', 45, 'nashik'],
    ['akanksha', 30, 'up']
]

# Create a list of Person objects
persons = [Person._make(data) for data in person_data_list]

# Access fields by name
print("Accessing fields by name:")
for person in persons:
    print(f"Name: {person.name}, Age: {person.age}, City: {person.city}")

# Access fields by index
print("\nAccessing fields by index:")
for person in persons:
    print(f"Name: {person[0]}, Age: {person[1]}, City: {person[2]}")

# 3.chain map   ----- using multiple dictionry without merging them
from collections import ChainMap

dict1={'a':1,'b':2}
dict2={'b':3,'c':4}

combined = ChainMap(dict1,dict2)

print(combined['a'])
print(combined['b'])
print(combined['c'])
print(combined.maps[1]['b'])

from collections import ChainMap

# Create two dictionaries
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 4, 'd': 5, 'e': 6}

# Combine the dictionaries using ChainMap
combined = ChainMap(dict1, dict2)

# Display the combined ChainMap
print("Combined ChainMap:", combined)

# Accessing values
print("Value of 'a':", combined['a'])
print("Value of 'b':", combined['b'])
print("Value of 'd':", combined['d'])

# Update a value
combined['b'] = 10
dict2['b'] = 7
print("Updated 'b' in combined ChainMap:", combined)
print("Updated dict1:", dict1)
print("Updated dict2:", dict2)

# Add a new key-value pair
combined['f'] = 7
print("Added 'f' to combined ChainMap:", combined)
print("Updated dict1:", dict1)
print("Updated dict2:", dict2)

# Access all keys, values, and items
print("All keys:", list(combined.keys()))
print("All values:", list(combined.values()))
print("All items:", list(combined.items()))

# 4.counters

from collections import Counter
fruits=['apple','banana','orange','apple','orange','banana','apple']
Counter=Counter(fruits)
print(Counter)

print(Counter['apple'])
print(Counter['banana'])

from collections import Counter

# Define a sentence
sentence = "Python is great language and easy to learn also Python is powerful amongst all"

counter=Counter(sentence)
# Split the sentence into words
words = sentence.split()

# Use Counter to count the occurrences of each word
word_count = Counter(words)

# Print the word count
print(word_count)
print(counter)



# 5 orders dict

from collections import OrderedDict
od=OrderedDict()
od['a']=5
od['b']=2
od['c']=9
od['d']=4
od['e']='word'

print(od)
print(od['e'])
print(od['b'])

# 6.defaultdict

from collections import defaultdict

D=defaultdict(int)
D['python']=1
D['java']=2
print(D['sql'])
print(D)
print(D['power bi'])
print(D)

!pip install gtts

from gtts import gTTS
import os

text="Hello and welcome!Thank you for using this application We are happy to have you here Enjoy your experience.Feel free to explore all the features. and we are here to help if you have any questions."

speech = gTTS(text=text,lang="hi")

speech.save("output.mp3")

from google.colab import files
files.download("output.mp3")

from IPython.display import Audio

Audio("output.mp3")

from google.colab import drive
drive.mount('/content/drive')

!pip install SpeechRecognition pydub

import speech_recognition as sr
from pydub import AudioSegment

mp3_file_path='/content/drive/My Drive/Colab Notebooks/audio/output.mp3'
wav_file_path='/content/drive/My Drive/Colab Notebooks/audio/output.wav'

audio=AudioSegment.from_mp3(mp3_file_path)
audio.export(wav_file_path,format='wav')

recognizer=sr.Recognizer()

audio_file=sr.AudioFile(wav_file_path)

with audio_file as source:
  audio_data=recognizer.record(source)
  text=recognizer.recognize_google(audio_data)

print("convert text:",text)



# database connections

import sqllite3

file_url

pip install pyodbc

import pyodbc                     #DESKTOP-EV0RMGQ

conn=pyodbc.connect('Driver={SQL Server};'
                     'Server=DESKTOP-EV0RMGQ;'
                     'Database=employeedob;'
                     'Trusted_connection=yes' )

cursor = conn.cursor()

