# -*- coding: utf-8 -*-
"""array.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VoDwPirw9K8LoW9EEdB9LYAm5kO5n9Mo
"""

ARRAY PTTHON

import array as arr
Eg_array = arr.array('i', [1, 2, 3, 4, 5])

print(Eg_array[0])
print(Eg_array[2])
print(Eg_array[3])

Eg_array[1] = 10
print(Eg_array)

Eg_array.append(6)
print(Eg_array)

Eg_array.extend([7, 8, 9])
print(Eg_array)

Eg_array.remove(10)
print(Eg_array)

Eg_array.pop()
print(Eg_array)

# types of code
#Arrays:
import array as arr
arr = arr.array('B', [1,25,3, 4, 5,41,5])
print(arr)

import array as arr
arr = arr.array('h', [-32746,-125,3, 4, 5,41,5,32127])
print(arr)

#1. append()
#Adds an element to the end of the array.
import array as arr
arr = arr.array('i', [11, 22, 33, 44, 55,66,26,65])
print(arr)
arr.append(78)
print(arr)

#2. extend()
#Adds elements from an iterable (e.g., list) to the end of the array.
import array as arr
arr = arr.array('i', [1, 2, 3, 4, 5,6,26,5])
print(arr)

arr.extend([12,14,14])
print(arr)

#3. insert()
#Inserts an element at a specified position in the array.
import array as arr
arr = arr.array('i', [1, 2, 3, 4, 5,6,26,5])
print(arr)
arr.insert(4,24)
print(arr)
arr.insert(0,0)
print(arr)

#4. pop()
#Removes and returns the last element, or the element at a specified position.
import array as arr
arr = arr.array('i', [1, 2, 3, 4, 5,6,26,5])
print(arr)
arr.pop()
print(arr)
arr.pop(2)
print(arr)

#5. remove()
#Removes the first occurrence of a specified element
import array as arr
arr = arr.array('i', [1, 2, 3, 4, 5,6,26,5])
print(arr)
arr.remove(5)
print(arr)

#6. index()
#Returns the index of the first occurrence of a specified element.
import array as arr
arr = arr.array('i', [1, 2, 3, 4, 5,6,26,5])
print(arr)
print(arr.index(5))

#7. count()
#Returns the number of occurrences of a specified element.
import array as arr

# Creating an array of integers
arr = arr.array('i', [1, 2, 3, 4, 5, 6, 26, 5,4,4,4])
print("Original array:", arr)

print(arr.count(5))

#8. reverse()
#Reverses the order of elements in the array.

import array as arr

# Creating an array of integers
arr = arr.array('i', [1, 2, 3, 4, 5, 6, 26, 5])
print("Original array:", arr)
arr.reverse()
print("Reversed Array: ",arr)
print(arr.reverse())

#9. buffer_info()
#Returns a tuple containing the memory address and the number of elements in the array.
import array as arr

# Creating an array of integers
arr = arr.array('i', [1, 2, 3, 4, 5, 6, 26, 5])
print("Original array:", arr)

print(arr.buffer_info())

#10. tolist()
#Converts the array to a regular list.
import array as arr

# Creating an array of integers
arr = arr.array('i', [1, 2, 3, 4, 5, 6, 26, 5])
print("Original array:", arr)
print(arr.tolist())

#types of array
#1D Array
import numpy as np
a=np.array([1,2,3])
print(a)

#2D Array
a =np.array([[2,4,6],[4,5,6],[6,5,7]])

print(a)
print(type(a))
a.ndim

#3d array

x= np.array([[[1,2,3], [4,5,6],[5,6,7]], [[4,5,6],[8,8,7],[8,9,7]]])
print(x)

print(type(x))
x.ndim

import numpy as np
np.zeros((2,3))

import numpy as np
np.ones((4,3))

import numpy as np

#full array with -6 values
np.full((4,4),0)

np.arange(0,101,10)

np.arange(1,20)

np.linspace(0,20,5)

np.eye(5)

import numpy as np
data = np.array([[5, 4, 0, 1],
                  [11, 4, 10, 7],
                  [7, 10, 5, 6],
                  [7, 12, 10, 4],
                  [3, 7, 3, 4]])

print(data)

dt =[1,3,4]
sum(dt)

data.max()

data.mean()

data.sum()

np.full((4,5),3)

a=np.array([[2,4,6],[5,6,7],[8,10,12]])
print(a)
print(a.shape)

a=np.array([[2,4,6,4],[5,6,7,8],[8,10,12,4]]) #3,4 =12
print("Original Array:\n", a)
a.shape=(6,2)
print("Changed Array:\n",a)

a.shape=(4,3)
print("Changed Array:\n",a)

import numpy as np
a=np.array([[1,2,3],[4,5,6],[5,8,9]])
print(a.size)
print(a.shape)
print(a.ndim)
print(a.dtype)

import numpy as np

x=np.random.randint(0,20,(6,5))
print(x)

x.shape

x.ravel()    # flatten arrey first to reshape

y=x.ravel()

x.reshape(3,10)

a1=np.array([[2,3],[5,6]])
print(a1)

a2=np.array([[4,5],[7,8]])
print(a2)

np.vstack([a1,a2])

np.hstack([a1,a2])

np.concatenate([a1,a2],axis=0)

np.concatenate([a1,a2],axis=1)

# numpy array mathmatics

# addtion
array1=np.array([[1,2,3],
                 [4,5,6]])
array2=np.array([[7,8,9],
                 [10,11,12]])
array3=np.array([[8,6,9],
                 [10,23,11]])

sum_array=array1 + array2 + array3
print('addition:\n',sum_array)
sum_array.ndim

import numpy as np
# substraction
np.subtract(20,10)

a=np.array([1,2,3])
b=np.array([4,5,6,])
c=np.array([1,3,4])
sub = a-b-c
print(sub)



import numpy as np
a=np.array([[1,2],[6,8]])
b=np.array([5,4])

result=a + b
print("result of a+b with brodcasting:\n",result)

# multiplication

import numpy as np
array1 = np.array([[1, 2, 3],
                   [4, 5, 6]])

array2 = np.array([[7, 8, 9],
                   [10, 11, 12]])

product_array = array1 * array2
print("Multiplication:\n", product_array)

#divition
import numpy as np
array1 = np.array([[10, 20, 30],
                   [40, 50, 60]])

array2 = np.array([[3, 4, 5],
                   [10, 5, 3]])

division_array = array1 / array2
print("Division:\n", division_array)
print(division_array.dtype)

import numpy as np
array1 = np.array([[1, 2, 3],
                   [4, 5, 6]])

array2 = np.array([7, 8, 9])

product_array = array1 * array2
print("Multiplication:\n", product_array)

# matrix multiplication
#no of column in first array must eqal to no of rows in econd array

x1=np.random.randint(0,10,(2,2))
x2=np.random.randint(0,10,(2,2))

x1

x2

np.dot(x1,x2)

# string functions
import numpy as np
x=np.array([1,2,3,'name'])
x

np.char.capitalize(x)

np.char.center(x,10,fillchar='*')

x=np.array([1,2,3,'data engineering'])
x

print(np.char.upper(x))
print(np.char.lower(x))
print(np.char.title(x))

y=np.array(["Data Science","Machine Learning"])
np.char.split(y,sep='a')

np.char.count(y,"a")

np.char.startswith(y, "d")

np.char.replace(y,'a','xxxx')

np.char.rjust(y,20,fillchar="*")

np.char.ljust(y,20,fillchar="*")

# exponential function

import numpy as np

a = np.array([1, 2, 3, 4, 5])

exp_a = np.exp(a)

print("Original array:", a)
print("Exponential of the array:", exp_a)

import numpy as np

b = np.array([[1, 2, 3], [4, 5, 6]])

exp_b = np.exp(b)

print("Original 2D array:\n", b)
print("Exponential of the 2D array:\n", exp_b)

#sqare roots finding

import numpy as np
a = np.array([1, 4, 7, 26, 15,7])

sqrt_a = np.sqrt(a)

print("Original array:", a)
print("Square root of the array:", sqrt_a)

#expo, sqrt,sin,cos,log

a=np.array([2,4,6])

print("sqrt of a:", np.sqrt(a))
print("exp of a:", np.exp(a))
print("sin of a:", np.sin(a))
print("cos of a:", np.cos(a))
print("log of a:", np.log(a))

# aggregate function

a=np.array([1,2,4,5,6,7,8,9])
print("Sum:",np.sum(a))
print("Minimum Value:", np.min(a))
print("Mean Value:", np.mean(a))
print("Median Value:", np.median(a))
print("Corelation Coefficient:", np.corrcoef(a))
print("Standard Deviation:", np.std(a))

# assignment 1
--1
myList = [10, 20, 30, 'apple', True, 8.10]

# a. Append values 30 and 40
myList.append(30)
myList.append(40)

# b. Reverse the elements and store in 'reversedList'
reversedList = myList[::-1]

print("myList:", myList)
print("reversedList:", reversedList)

# --2
myDict = {
    1: 'data',
    2: 'information',
    3: 'text'
}

# a. Eliminate the 'text' value from the dictionary
myDict = {k: v for k, v in myDict.items() if v != 'text'}

# b. Add 'features' to the dictionary
myDict[4] = 'features'

# c. Fetch the 'data' element from the dictionary and display it
for key, value in myDict.items():
    if value == 'data':
        print("Fetched element:", value)
        break

#--3

my_tuple = (1, 2, 3, 'apple', 'mango')
print(my_tuple)

#--4
numeric_tuple = (10, 20, 30, 40, 50)

# a. Find the minimum value
min_value = min(numeric_tuple)
print("Minimum value:", min_value)

# b. Concatenate my_tuple with numeric_tuple
r1 = my_tuple + numeric_tuple
print("Concatenated tuple (r1):", r1)

# c. Duplicate my_tuple 2 times
newdupli = my_tuple * 2
print("newdupli:", newdupli)

#--5

set1 = {1, 2, 3, 4, 5}
set2 = {2, 3, 7, 6, 1}

# a. Union of set1 and set2
union = set1.union(set2)
print("Union:", union)

# b. Intersection of set1 and set2
intersection = set1.intersection(set2)
print("Intersection:", intersection)

# c. Difference of set1 from set2
difference = set1.difference(set2)
print("Difference:", difference)

# assignment 2
#--1

import numpy as np
matrix = np.arange(2, 11).reshape(3, 3)
print(matrix)

#--2
import numpy as np

user_input = input("Enter integers separated by spaces: ")
int_list = list(map(int, user_input.split()))

# Create a NumPy array from the integer list
int_array = np.array(int_list)

# Convert the array to float type
float_array = int_array.astype(float)

print("Original array:", int_array)
print("Array converted to float type:", float_array)

#--3
import numpy as np
array = np.array([10, 20, 30])
print("Original array:", array)

# Values to append
values_to_append = np.array([40, 50, 60, 70, 80, 90])

# Append values to the original array
updated_array = np.append(array, values_to_append)

# Display the result
print("Updated array after appending:", updated_array)

import numpy as np
array1 = np.array([11, 22, 33])
array2 = np.array([44,55, 66])

# Add the arrays element-wise
sumArray = array1 + array2

print("Array 1:", array1)
print("Array 2:", array2)
print("Sum Array:", sumArray)

#--5

import numpy as np
array1 = np.arange(10, 100, 10).reshape(3, 3)
print(array1)

# a. Extract the 1st row from the array
first_row = array1[0]
print("\nFirst row:", first_row)

# b. Extract the last element from the array
last_element = array1[2, 2]
print("\nLast element:", last_element)